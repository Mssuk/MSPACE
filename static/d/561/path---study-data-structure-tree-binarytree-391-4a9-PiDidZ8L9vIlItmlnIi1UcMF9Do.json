{"data":{"site":{"siteMetadata":{"title":"MSPACE","author":"Song Min Suk"}},"markdownRemark":{"id":"3ce63e47-1ab1-55a9-b3d0-c701902411cc","excerpt":"트리를 string 데이터 타입으로 serialize로 하고, seralized된 string을 트리로 deserialize해야 한다. 1. Deserialize string tree = “5,4,8,11,null,13,4,7,2,null,null,…","html":"<p>트리를 string 데이터 타입으로 serialize로 하고, seralized된 string을 트리로 deserialize해야 한다.</p>\n<h4><strong>1. Deserialize</strong></h4>\n<blockquote>\n<p>string tree = “5,4,8,11,null,13,4,7,2,null,null,5,1”;</p>\n</blockquote>\n<p>위와 같은 string이 주어졌을 때 deserialize 하는 방법은 DFS (Depth First Search) 접근과 BFS(Breath First Search) 접근을 이용할 수 있다. 전자는 stack 혹은 recursive를 후자는 queue를 이용할 것이다.</p>\n<p>다음은 bfs 접근을 이용한 deserialize를 하는 코드이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sstream></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//트리노드 클래스</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    TreeNode <span class=\"token operator\">*</span>left<span class=\"token punctuation\">;</span>\n    TreeNode <span class=\"token operator\">*</span>right<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">TreeNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">left</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">right</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//string 을 파싱하여 노드로 바꾸는 함수</span>\nTreeNode <span class=\"token operator\">*</span><span class=\"token function\">stringToNode</span><span class=\"token punctuation\">(</span>stringstream<span class=\"token operator\">&amp;</span> ss<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    string str<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">,</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">==</span> <span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nTreeNode <span class=\"token operator\">*</span><span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span>string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    stringstream <span class=\"token function\">ss</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    TreeNode <span class=\"token operator\">*</span>root <span class=\"token operator\">=</span> <span class=\"token function\">stringToNode</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//root가 null이면 null 리턴 후 함수 종료</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 노드  - 왼쪽 차일드 - 오른쪽 차일드 순서로 차례로 만들어 넣기 위해 queue가 필요하다.</span>\n    queue<span class=\"token operator\">&lt;</span>TreeNode<span class=\"token operator\">*</span><span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span>\n    q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">auto</span> top <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        top<span class=\"token operator\">-</span><span class=\"token operator\">></span>left <span class=\"token operator\">=</span> <span class=\"token function\">stringToNode</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>top<span class=\"token operator\">-</span><span class=\"token operator\">></span>left <span class=\"token operator\">!=</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>top<span class=\"token operator\">-</span><span class=\"token operator\">></span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        top<span class=\"token operator\">-</span><span class=\"token operator\">></span>right <span class=\"token operator\">=</span> <span class=\"token function\">stringToNode</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>top<span class=\"token operator\">-</span><span class=\"token operator\">></span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>top<span class=\"token operator\">-</span><span class=\"token operator\">></span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> root<span class=\"token punctuation\">;</span>\n    \n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    string tree <span class=\"token operator\">=</span> <span class=\"token string\">\"5,4,8,11,null,13,4,7,2,null,null,5,1\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<blockquote>\n<p> ┌────────────┐</p>\n<p> │ <strong>이를 응용한 문제</strong>   │</p>\n<p> └────────────┘</p>\n</blockquote>\n<p>직렬화된 형식으로 변환된 이진트리가 입력으로 주어질 때 루트(root)노드로부터 단말(leaf)노드까지 존재하는 경로들 내의 노드들의 합이 입력으로 주어진 숫자와 같은 모든 경로의 개수를 구하는 코드를 작성하시오.</p>\n<h3>입출력 예</h3>\n<p>예:</p>\n<ul>\n<li>입력: 5,4,8,11,null,13,4,7,2,null,null,5,1, 22 (목표값)</li>\n<li>출력: 2</li>\n</ul>\n<hr>\n<p> 루트 노드로부터 단말 노드까지의 합을 계산 할 수 있는 메소드를 만든다.</p>\n<p>각각의 합들을 저장하기 위해 Map을 이용하기로 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> nodesHap <span class=\"token punctuation\">(</span> TreeNode<span class=\"token operator\">*</span> T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> currentSum<span class=\"token punctuation\">,</span> map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> m<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//inorder traversal의 알고리즘을 이용한다.</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    \n    currentSUm <span class=\"token operator\">+</span> <span class=\"token operator\">=</span> T<span class=\"token operator\">-</span><span class=\"token operator\">></span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-</span><span class=\"token operator\">></span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">&amp;&amp;</span> root<span class=\"token operator\">-</span><span class=\"token operator\">></span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//terminal node라면</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//만약 해당 경로의 합과 같은 경우가 있었다면 카운트를 올려주고, 그렇지 않다면 새로 추가한다.</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>currentSum<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            m<span class=\"token punctuation\">[</span>currentSum<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            m<span class=\"token punctuation\">[</span>currentSum<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">nodesHap</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-</span><span class=\"token operator\">></span>left<span class=\"token punctuation\">,</span> currentSum<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">nodesHap</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">-</span><span class=\"token operator\">></span>right<span class=\"token punctuation\">,</span> currentSum<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> target <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span> \n    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> m<span class=\"token punctuation\">;</span>\n    \n    string tree <span class=\"token operator\">=</span> <span class=\"token string\">\"5,4,8,11,null,13,4,7,2,null,null,5,1\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">nodesHap</span><span class=\"token punctuation\">(</span><span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        answer <span class=\"token operator\">=</span> m<span class=\"token punctuation\">[</span>traget<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>keywords: <strong>Binary Tree, deserialize, queue</strong> </p>","frontmatter":{"title":"Serialize and Deserialize Binary Tree","date":"December 03, 2018"}}},"pageContext":{"slug":"/study/data_structure/tree/binarytree/"}}